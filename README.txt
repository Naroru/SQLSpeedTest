ТЕСТЫ СКОРОСТИ ВСТАВОК И ВЫБОРОК ЧЕРЕЗ SPRING DATA и JDBC TEMPLATE

ПОДГОТОВКА
создать БД в соответствии с настройками
для отображения логов менять свойства в application.yaml  - generate_statistics  и sql


--------------------------------------------------
ВЫВОДЫ ИСХОДЯ ИЗ ТЕСТОВ

ВСТАВКА
ПРИ ИСПОЛЬЗОВАНИИ SPRING DATA
Результаты тестов показывают, что при использовании сущности с типом генерации айдишника IDENTITY
пакетная вставка не происходит.

Однако выгодно для коллекций использовать метод saveAll() у репозитория, либо, если идет сохранение записей в цикле
использовать аннотацию @Transactional, чтобы создавать только 1 соединение с БД

Если делать сохранение записей в цикле без @Transactional, то будет столько раз устаналиваться соединение с БД, сколько вставок в цикле
------------------------------------
Батчевая вставка реализуется для сущностей с типом генерации айдишников SEQUENCE
При этом важны два параметра allocationSize - количество айдишников, которые будут вычисляться jav'ой и присваиваться массиву сущностей
а также batchSize - максимальному размеру батча

При вставке 1000 записей с allocationSize 50 и batchSize = 100, будет 1000/50 + 1 запрос для генерации айдишников + 1000/100 запросов для вставки
(хотя при showsql = true мы по-прежнему будем видеть 1000 вставок. Но в логах Хайбернета будет написано что то вроде  34192100 nanoseconds spent executing 10 JDBC batches;)

Батчевая вставка значительно быстрее НЕ батчевой, при, разумеется, больших объемах данных и корректных настройках allocationSize и batchSize

ВЫБОРКА
Выборка через JDBC Template работает быстрее, чем через Репозиторий. При этом даже выборка в цикле через JDBC Template отрабатывает быстрее
репозитория. Не создаются дополнительные установки соединений с БД

Выборка через Репозиторий 1-м запросом также отрабатывает за приемлимое время, и только выборка в цикле через репозиторий работает медленно
из-за создания множества соединений